'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'drs-11.github.io/public/general/support/','title':"Support",'section':"Public",'content':"Slack #  Slack is a great communication tool. Most CCExtractor developers hang out in a slack team. You\u0026rsquo;re welcome to request an invitation here: {slackinvite}\nTechnical issues #  By far the best way to get report issues is by opening a ticket at GitHub\u0026rsquo;s issue tracker.\nWhen creating a ticket:\n- Make sure you are using the last CCExtractor version.\n- If it\u0026rsquo;s a new thing (for example a video file that a previous CCExtractor version processed OK and now causes a crash) mention the last version you know was correct.\n- If the issue is about a specific file, make that file available for us. Don\u0026rsquo;t just send us the output from CCExtractor, we can\u0026rsquo;t do anything about a screenshot that shows a crash, we need the input that actually causes it. Preferably you make it available for us on the Sample Platform, but you can also upload the file to Dropbox, Google Drive, etc, and add a download link to your ticket.\n- If you cannot make the file public for any (reasonable) reason you can send us a private invitation (both Dropbox and Google Drive allow that). In this case we will download the file and upload it to the private developer repository.\n- Do not upload your file to any location that will require us to sign up or endure a wait list, slow downloads, etc.\n- If your upload expires make sure you keep it active somehow (replace links if needed). Keep in mind that while we go over all tickets some may take a few days, and it\u0026rsquo;s important we have the file available when we actually need it.\n- Make sure you set an alert in GitHub so you get notifications about your ticket. We may need to ask questions and we do everything inside GitHub\u0026rsquo;s system.\n- Please use English.\n- It goes without saying, we like polite people.\nMailing list #  We do have a mailing list available on https://groups.google.com/forum/#!forum/ccextractor-dev, and all GitHub issues are posted here.\nIt\u0026rsquo;s read by the right people; you can use it if you prefer it to Slack.\nEmail #  If you need to use email, you can reach the organisation\u0026rsquo;s admin on the next email address:\n"});index.add({'id':1,'href':'drs-11.github.io/public/general/about_the_org/','title':"About CCExtractor Development",'section':"Public",'content':"CCExtractor Development is an informal (meaning we\u0026rsquo;re not incorporated anywhere) organization that exists to coordinate the development efforts of the volunteers that contribute to the software and to manage our participation in specific events such as Google Summer of Code and Code-In.\nThe following video is a contribution from Manveer Singh Basra, a Code-In 2016 student:\n  "});index.add({'id':2,'href':'drs-11.github.io/public/gsoc/ideas_page_for_summer_of_code_2021/','title':"Google Summer of Code (GSoC) 2021 ideas page",'section':"Public",'content':"Google Summer of Code 2021 #  Welcome to our ideas page. It\u0026rsquo;s great you want to start early. Please join us in our slack channel! (we\u0026rsquo;ll leave as an exercise to you to find it — it\u0026rsquo;s on our website).\n**This is an \u0026ldquo;new way of doing things year\u0026rdquo;**. GSoC projects are now supposed to take around 175 hours and we\u0026rsquo;ve adapted our ideas to reflect that. If you think any idea is too long or too short please let us know - we still need to fine tune this!\nAs you will see, this year has a lot of Rust. The reason is simple: Security. Our C code base has known (and we suspect, a lot of unknown) security issues caused by the usual memory management in C. Lots of people have touched the code over the years, and it shows.\nThere\u0026rsquo;s also Flutter, which we love, and more.\nWe will provide resources for students — we\u0026rsquo;ll give access to a high-speed server, all our samples (we\u0026rsquo;ll even ship a portable drive with them anywhere in the world, so don\u0026rsquo;t worry about slow connections) and various other perks.\nYou are welcome to check out the page (actual ideas at the bottom of the page, with each project having it\u0026rsquo;s own separate page as well) and start early in the community bonding process as well as learning a bit about our code ethics and practices. And of course, we\u0026rsquo;d love you to stay around even if we are not invited to GSoC or if we cannot invite you as a student.\nThe ideas we currently have #  Important: If you have something else in mind that relates to subtitles and accessibility please get in touch. We prefer that you do something that you are passionate about even if it\u0026rsquo;s something we hadn\u0026rsquo;t considered.\nAfter you check out our ideas please continue reading to the bottom of the page to get information about who we are, how we collaborate, what resources we will provide to you, etc.\nSome tasks descriptions are still vague. We know that. Feel free to get in touch for questions, or just check their page from time to time. We will update the descriptions often.\nCCExtractor Rust rewrite\n  Name Description Tech you need to know Tech you will learn Difficulty    Initial Rust scaffolding Set up the base Rust infrastructure. Build with cargo. FFI. (Some) Rust, Some (C) A lot of Rust + C interoperability.\nCCExtractor internals Medium  Rewrite 708 decoder in Rust CEA-708 is the American standard for digital subtitles. We have a reasonably good (meaning, easy to understand, and it was written when we knew what we were doing) C base. We'd like to port it to rust. We will provide you with the official technical standards. (Some) Rust, Some (C) Digital subtitles.\nWorking with standards. Medium  Rewrite 608 decoder in Rust CEA-608 is the American standard for analog subtitles. It also carries things like emergency alerts, basic TV guide, and content classification. We have a complete implementation in C that works OK (possibly with some bugs) but that is not really very well organized. We'd like to port it to rust. We will provide you with the official technical standards. (Some) Rust, Some (C) Analog subtitles.\nXDS.\nWorking with standards. Medium  Rewrite the OCR subsystem in Rust. We use tesseract to OCR bitmap based subtitles. It's a great library, but because its input is a bitmap that is preprocessed (so provide a reasonable input) there's lots of places in which there can be buffer overruns, underruns... many of the problems that Rust shines on are evidenced here. So a Rust rewrite of this would be a big win. OCR\nRust FFI Tesseract\nImaging\nOCR Medium    Core subtitle tool (CCExtractor itself)\n  Name Description Tech you need to know Tech you will learn Difficulty    Add support for DTMB countries DTMB is the standard for Chinese TV, also implemented by countries such as Cuba. What kind of student is ideal for this task? One with lots of analytic skills and patience. If you are one of those, don't disregard this task just because you don't speak (or maybe, even care) about Chinese. The experience on dealing with this will be extremely valuable in the future.\nWe will use part of the organization funds to buy standard documents you might need, a capture device, and in general, anything required to make your life easier.\n C DTMB\nVideo standards\nHardware\nResearch Unknown  Add Japanese support Captions are used by people all over the world on a regular basis. Most of us are familiar with regular horizontal captions at the bottom of the screen, but did you know that in Japan a common position for captions is vertically on the right or left side of the screen? Come learn more about what Japanese audiences need out of captions as well as how captioning standard likes IMSC and WebVTT support these features. Japanese (or be good with foreign languages) Depends Suspected hard    ** Artificial Intelligence and clever algorithms **\n  Name Description Tech you need to know Tech you will learn Difficulty    Poor man's Rekognition (III) Amazon Rekognition is a (paid) service that is able to identify celebrity faces in a picture. Last year we did some work towards creating a free alternative. This year we want to improve on the past work. Your choice AI\nComputer vision Unknown  Poor man's Textract Amazon Textract a (paid) service that \"automatically extracts text and data from scanned documents. Amazon Textract goes beyond simple optical character recognition (OCR) to also identify the contents of fields in forms and information stored in tables.\". We want to build a free alternative that provides an output of similar quality. Your choice AI\nComputer vision\nOCR Unknown    ** Support tools we and other orgs use as part of their development process** ^ Name ^ Description ^ Tech you need to know ^ Tech you will learn ^ Difficulty ^ | The sample platform (/ continuous integration) project | The sample platform is a good way to help new contributors to check if their code doesn\u0026rsquo;t introduce any regressions. It\u0026rsquo;s pretty stable, but is often hard to interpret for new contributors, and still pretty slow if the queue builds up. We want to move the platform towards GCP (Google Cloud Platform) and run the tests on disposable instances rather than through KVM.\n**This project is guaranteed to be selected if the proposal is good.** | Git\nPython | Google Cloud API\u0026rsquo;s\nGitHub Actions\nGitHub API\u0026rsquo;s\nContinuous Integration (CI)\nAutomated deployments\nGitHub integration | Medium/Hard |\n** Multimedia (misc) **\n  Name Description Tech you need to know Tech you will learn Difficulty    Improve our reference channel for Roku Roku is currently the most common media streamer. It's cheap and neutral (it's not in any \"fight\"). Unfortunately, there aren't any good open source channels, so if you want to start your own you have to start from scratch. Last year we started a new channel everyone can use as a starting point. We'd like to continue working on it, adding new features. We will send a free Roku to our student for development. None Brightscript\nRoku\nVideo\nStreaming Medium    Flutter\n            rutorrent mobile interface (II) rutorrent is the most popular web interface for rtorrent, which is possibly the most used BitTorrent client in linux. Last year we started a new project to write a Flutter based interface and was successful and it\u0026rsquo;s gaining traction on its own. We want to work on that project and include new features. Flutter BitTorrent Medium    ** New things we\u0026rsquo;re currently interested on **\n  Mouseless for Linux Mouseless is a nice tool to practice keyboard shortcuts for a few popular apps. Unfortunately it's only available for Mac. We'd like to create an open-source Linux version that can be easily extended. Your choice ?? Unknown  The next peer-to-peer protocol BitTorrent is of course the world's most used peer to peer protocol. It's great, but it was designed before the cloud was ubiquitous and it doesn't make use of the places where you have the most storage or the most bandwidth. Can we design something for the next decade? Depends Peer-to-peer,\ncloud Medium  Linux tuning for network throughput Come up with a system that tunes the linux kernel to maximize network throughput for a number of workloads, such as web server or BitTorrent. We will provide access to a server with a huge pipe (10 Gbit/s, SSD, lots of cores) and your job is to build a tool that maximizes the throughput (and prove it!) Linux Kernel internals,\nNetworking Hard    About us #  We are a small org, which means that your contribution will have a large impact. It\u0026rsquo;s not going to mean a 0.5% improvement on a big project — it\u0026rsquo;s going to be more than 10% on a medium size one. If you like challenges and want a chance to shine this is your place.\nWe have -we think- statistically amazing continuity in the team: Most GSoC students from all the past years are still involved, even if they are no longer eligible as students. They still contribute code, and they mentor both in GSoC and the sister program GCI. As mentors, they also come to the Summer of Code summit which traditionally takes place in October.\nWe have *mentors all over the world* (North America, Europe, Asia and Australia), so time zones are never a problem. Our main channel of communication is a Slack channel to which everyone is welcome. We expect all accepted students to be available on Slack very often, even if you don\u0026rsquo;t need to talk to your mentor. This will help you ask questions when necessary, and you might be able to help others out as well while working on your project.\nException: If your country (such as Russia) has banned Slack please get in touch in we\u0026rsquo;ll work out a solution with you. We absolutely want you to participate.\nA mailing list is also available for those that prefer email over slack. It\u0026rsquo;s a new mailing list (the old one hasn\u0026rsquo;t been used in a long time) but it\u0026rsquo;s read by everyone involved in GSoC.\nAll our top committers will be mentoring. Many of them are former GSoC students or winners of GCI.\nPerks #  All accepted students get a programming book immediately after being accepted, with the hope that they read them before the coding starts. We want to see if this increases the quality of the work. So far we have selected these three books (pick one), but we\u0026rsquo;re open to suggestions: Clean Code, Elements of Programming Interviews in Python, Cracking the code interview.\nWe will also provide to all accepted students: - 6 months of access (from the acceptance date) to all courses in educative.io - 12 months of access (from the acceptance date) to backtobackswe, which is a fantastic resource to learn algorithms, prepare for coding interviews, and in general learn fundamentals.\nThe student working on CEA-708 will also receive a copy of the latest CEA-708 specification document.\nAbout what we use #  This is what we use today. It doesn\u0026rsquo;t mean this is what we want to continue using. Probably not — we\u0026rsquo;re really open to change. We\u0026rsquo;re just describing the status quo so you know what you are getting into :-)\nThe core tool that names the organization (CCExtractor) is a command-line program written in C (not C++).\nThe current Windows GUI is written in C#, and we have another GUI for Linux that\u0026rsquo;s written with Qt, and a small GUI that\u0026rsquo;s integrated into the main program (C). In we\u0026rsquo;re being honest, nothing is great. Good news for you is that you can start over if you want.\nThe testing tool we use to run regression tests is mainly written in Python, but it also used Javascript, CSS and some shell scripting. The Test suite is written in C#. One of the projects this year is about replacing it.\nThe prototype real time subtitle website is written in NodeJS.\nWe also have a number of support tools that do a number of different things, from downloading subtitles from streaming services to translating them with Google Translate or DeepL. Most of them are written in Python, but since they are small tools that do their job you don\u0026rsquo;t need to worry much about them.\nFor totally new things you can use whatever tool you feel is best for the job.\nAbout sample media and other resources #  We work with huge files. Not all of them are huge, but many are. We know that many students don\u0026rsquo;t have access to high speed internet. To those students we will ship (as soon as they are selected) a portable hard drive with all our samples. So if your internet connection is not good, don\u0026rsquo;t worry — as long as you can plug a USB drive to your development computer you can participate with us.\nWe also have a shared Linux development server with lots of storage and a Gigabit uplink. Students get an account on it and they are welcome to use it. There\u0026rsquo;s nothing there except our own work, so it\u0026rsquo;s a trusted environment (for a server that is connected to internet of course).\nThe sample platform also hosts a bunch of samples, both which are small or decently sized.\nSome projects have specific requirements: For example to add support for JokerTV you will need a physical JokerTV device. We will send one to the student that takes this project well before GSoC starts. The LiveTV project requires a subscription to YouTube with LiveTV (whatever it\u0026rsquo;s called this week) and Hulu. We will pay for those. If your project requires some cloud resources (Google Compute Engine, for example), we will pay for that, too.\nIn general, you are not expected to pay for anything (other than your own development computer and internet, of course) related to any project.\nIf you need anything not mentioned (such as a book) let us know. Within reason, we\u0026rsquo;ll help you.\nAbout the projects and getting accepted #  Qualification: Our selection system is based on several factors. Of course no student ranks in all criteria, so don\u0026rsquo;t worry when you read the list below.\nWork on our core tool: Even if you are going to be working on something totally different. This might seen counter intuitive, but the thing is if you prove you can dig into our (messy) code base, find yourself your way around it, and fix a few bugs, you are just the kind of person we can trust to \u0026ldquo;figure things out\u0026rdquo;. GSoC is among other things, a learning experience. No matter what project you decide to work on, there\u0026rsquo;s going to be roadblocks, things you don\u0026rsquo;t know how to do, etc. So we really like it when students embrace those situations.\nQualification tasks specific to the project: The detail page for some projects contains specific qualification tasks that apply to them.\nContributions to existing open source projects: This can be anything. From a good GitHub profile to pull-requests sent to any other existing project, participation in hackathons, Google Code-In, past GSoCs and so on.\nA good proposal: This is the one criteria that is non-negotiable. Your proposal has to be good, period.\nProject popularity: Some ideas just have more competition, so if participating in GSoC is a top priority for you (over working on a specific project), consider applying to one of the \u0026ldquo;niche\u0026rdquo; ideas. After all, that\u0026rsquo;s a great way to get your foot in the door :-)\nBest core tool tasks\nWe\u0026rsquo;re added a difficulty level to all our open issues on GitHub. Best thing you can do is head there and see if you are able to fix some of the easy ones and work your way up. We don\u0026rsquo;t expect you to be able to do the hard ones but we\u0026rsquo;d be impressed if you did :-)\nFor some of the easy ones you don\u0026rsquo;t even need to know C. Just being able to compile CCExtractor and dig around a bit will be enough.\nThe sample platform\u0026rsquo;s issues are tagged with \u0026ldquo;gsoc-proposal-task\u0026rdquo;, so you can easily see what you can work on.\nTake home qualification tasks #  If instead of working on existing code you\u0026rsquo;d prefer to show us your skills working on something new, you can pick one of these projects.\nCommunity etiquette #  It goes without saying that everyone in the community has to be polite and respectful, and consider everyone else a member of a team and not a competitor.\nAll developers are part of the team, by the way. Our Slack channel has mentors, code-in participants, other students, or developers and users that are none of the above but they all play some kind of role in CCExtractor\u0026rsquo;s community.\nPart of being respectful is giving consideration to everyone else\u0026rsquo;s time. Most of us have day jobs, and as such are limited in the time we can use to guide you. We\u0026rsquo;d like to spend it on quality discussions, and not on things that are for example written on this website, things that you can easily retrieve by reading documentation on used libraries or on the software\u0026rsquo;s help screen. Asking this kind of questions in the Slack channel shows little respect for our time. This doesn\u0026rsquo;t mean you can\u0026rsquo;t ask questions, but remember that being a clueless user and a lazy developer are two very different things. If you ask those questions you will probably get an answer as if you were a clueless user (polite no matter what), but if you apply to GSoC you will be considered a lazy developer. Google is your friend ;)\nTell things as you see them. Politely -you\u0026rsquo;re not Linus-, but don\u0026rsquo;t sugar-coat it. We know some parts of our code is poorly written, poorly documented, etc. It stands out, so you will know when you dig in. No one is going to be offended by having that code rewritten or refactored. Peer review applies to everybody\u0026rsquo;s work and is done by everybody.\nCross project proposals #  Because we use a number of libraries and in fact \u0026ldquo;are a library\u0026rdquo; ourselves (meaning other programs can link CCExtractor as a library, or invoke the binary) we interact with other communities and their software. From time to time there\u0026rsquo;s a chance to do something interesting that affects CCExtractor and something else (FFmpeg comes to mind, but also Kodi, VLC, libGPAC, Red Hen, to mention just a few of our friends that typically participate in Summer of Code). So how does this work? As long as the work benefits CCExtractor and it\u0026rsquo;s part of your summer project, we\u0026rsquo;re OK with you spending some time on the other project. For example if you are improving our MP4 support, for which we use libGPAC, and need to fix or improve something on libGPAC you are welcome to do so. If you do, make sure you submit your changes to their maintainers and follow through with their merge process.\nYour proposal #  You can propose to do any of the following ideas, or you can bring your own. In any case, make sure you run them by us before you actually submit your proposal.\nAt the very least your proposal needs to\n- Explain what you do want to do, why it is important to you (don\u0026rsquo;t make up a story here — the reason can be that you need it, that you just think it\u0026rsquo;s cool, that you have an itch to work on it, etc), and why it could be important or useful to us.\n- Explain how you intend to accomplish the goal, in enough detail that makes it clear that you have done your homework. For example, \u0026ldquo;I will modify the CCExtractor binary so that it\u0026rsquo;s able to convert audio to text with perfect accuracy\u0026rdquo; is the same thing as sending your proposal to the trash. You need to have a plan.\n- Detail the timeline explaining what the expected progress is for each week or every two weeks (pay special attention to the milestones within the GSoC timeline itself, of course) and how we should validate the results.\n- Detail what kind of support you will need from us. For example, if you are going to need test streams, hardware, access to a server, etc, let us know, so we can prepare everything for you as soon as possible.\n- Detail your expected working hours in UTC. We\u0026rsquo;re used to weird working schedules, so don\u0026rsquo;t worry about working in the middle of the night, or weekends instead of other days, etc. Knowing your hours may help us to match you better with a mentor.\n- Mention your planned absences. We don\u0026rsquo;t need you to detail what you will be doing when you are not working of course, but if you are going away for any reason we need to know so we don\u0026rsquo;t think you\u0026rsquo;ve abandoned.\n- Link to your GitHub (or any other repository) profile, if you have one, so we can take a look at your previous work.\n- GSoC is a coding program: This means that ideas that are about testing (unless it involves coding something to test our programs ;) ), website design, etc, are out.\n- However, we want to have good documentation: Make sure you have time to write a good technical article explaining your work.\n- Be realistic and honest with the timeline. Consider each week you should work around 30 hours. If your timeline reserves a lot of time for minor things we\u0026rsquo;ll think that you are not going to be working full-time in GSoC. On the other hand if you promise to do things in a lot less than that it seems realistic to us it will seem that you don\u0026rsquo;t really know how much work things take.\n- If you are going to be using 3rd party libraries (that\u0026rsquo;s OK), make sure to validate that their license is compatible with GPLv2 (which is ours). List the libraries in your proposal. Check that they are cross-platform. If you will need to extend those libraries in any way please explain. In this case, your proposal should include time to get that extension submitted to the maintainers (we love to contribute to other projects).\nSomething else: Mentors often have their fingers in several pies. If you send the same proposal to several orgs everyone will know. So do yourself a favor and don\u0026rsquo;t do that. You can apply to several organizations and that\u0026rsquo;s totally fine, but each organization will want to see that you have put the time to write a great proposal that is focused on them.\nUseful resources #  A great resource for GSoC.\n"});index.add({'id':3,'href':'drs-11.github.io/public/general/whatsccextractor/','title':"What's CCExtractor?",'section':"Public",'content':"What\u0026rsquo;s CCExtractor?\nA tool that analyzes video files and produces independent subtitle files from the closed captions data. CCExtractor is portable, small, and very fast. It works in Linux, Windows, and OSX.\nWhat kind of closed captions does CCExtractor support?\nAlmost all of them:\n- American TV captions (CEA-608 is well supported, and CEA-708 is starting to look good)\n- European Teletext\n- European DVB\n- Brazilian ISBD\n- DVD\n- MXF\nMissing:\n- DTMB (Chinese)\nHow easy is it to use CCExtractor?\nVery. Just tell it what file to process and it does everything for you.\nCCExtractor integration with other tools\nIt is possible to integrate CCExtractor in a larger process. A couple of tools already call CCExtractor as part their video process - this way they get subtitle support for free. Starting in 0.52, CCExtractor is very front-end friendly. Front-ends can easily get real-time status information. The GUI source code is provided and can be used for reference. Any tool, commercial or not, is specifically allowed to use CCExtractor for any use the authors seem fit. So if your favourite video tools still lacks captioning tool, feel free to send the authors here.\nYou can also use CCExtractor as a library (as opposed to just running the binary), or take parts of the code. Keep in mind however that CCExtractor is GPLv2 so if you take parts or all of the source code your code must also be GPLv2.\nWhat\u0026rsquo;s the point of generating separate files for subtitles, if they are already in the source file?\nThere are several reasons to have subtitles separated from the video file, including:\n- Closed captions never survive MPEG processing. If you take a MPEG file and encode it to any format (such as divx), your result file will not have closed captions. This means that if you want to keep the subtitles, you need to keep the original file. This is hardly practical if you are archiving HDTV shows for example.\n- Subtitles files are small - so small (around 250 Kb for a movie) that you can quickly download them, or email them, etc, in case you have a recording without subtitles.\n- Subtitles files are indexable: You can have a database with all your subtitles if you want (there are many available), so you can search the dialogs.\n- Subtitles files are a de-facto standard: Almost every player can use them. In fact, many setbox players accept subtitles files in .srt format\n so you can have subtitles in your .mp4/.mkv/.avi./etc movies and not just in your original DVDs.\n- Closed captions are stored in many different formats by capture cards. Upgrading to a new card, if it comes with a new player, may mean that you can\u0026rsquo;t use your previously recorded closed captions, even if the audio/video are fine.\n- Closed captions require a closed caption decoder. All US TV have one (it\u0026rsquo;s a legal requirement), but no European TV does, since there are not closed captions in Europe (teletext and DVB subtitles are used instead). Basically this means that if you buy a DVD in the US which has closed captions but no DVD subtitles, you are out of luck. This is a problem with many (most) old TV shows DVDs, which only come with closed captions. DVD producers don\u0026rsquo;t bother doing DVD subs, since it\u0026rsquo;s another way to segment the market, same as with DVD regions.\nHow I do use subtitles once they are in a separate file?\nCCExtractor generates files in the two most common formats: .srt (SubRip) and .smi (which is a Microsoft standard). Most players support at least .srt natively. You just need to name the .srt file as the file you want to play it with, for example sample.avi and sample.srt.  Other formats just as .txt (transcripts) are supported as well.\nWhat kind of files can I extract closed captions from?\nCCExtractor currently handles:\n- Most HDTV captures (where you save the Transport Stream).\n- Captures where captions are recorded in bttv format. The number of cards that use this card is huge. My test samples came from a Hauppage PVR-250. You can check the complete list here.\n- DVR-MS (microsoft digital video recording).\n- Tivo files\n- ReplayTV files\n- Dish Network files\n- DVDs\nUsually, if you record a TV show with your capture card and CCExtractor produces the expected result, it will work for your all recordings. If it doesn\u0026rsquo;t, which means that your card uses a format CCExtractor can\u0026rsquo;t handle, please contact me and we\u0026rsquo;ll try to make it work.\nCan I edit the subtitles?\n.srt files are just text files, with time information (when subtitles are supposed to be shown and for how long) and some basic formatting (use italics, bold, etc). So you can edit them with any text editor. If you need to do serious editing (such as adjusting timing), you can use subtitle editing tools - there are many available.\nCan CCExtractor generate other subtitles formats?\nAt this time, CCExtractor can generate .srt, .smi and raw and bin files.\nWhat\u0026rsquo;s a raw file?\nA raw file is a file that contains an exact dump of the closed captions bytes, without any processing. This lets you use any tool of your choice to process the data. For example, McPoodle\u0026rsquo;s excellent tools can generate subtitles files in several formats, adjust timing, etc.\nWhat\u0026rsquo;s a bin file? How is it different from a raw file?\nA bin file contains a dump of the closed captions bytes (same as a raw file) but it also includes timing information. This is a format that we made up for CCExtractor, i.e. it\u0026rsquo;s not any kind of industry standard. However, it\u0026rsquo;s the most useful (to us) for debugging purposes, so if you need to send us a sample please use this format. Also, a bin format can hold several CC streams (several languages, even from both analog and digital). A raw file cannot.\nHow long does it take to process a MPEG file?\nObviously, it depends on the computer and the length of the file. In my (really old) computer it took around 90 seconds for a 45 minutes show in HDTV, with CPU usage around 3% (I/O operations are what\u0026rsquo;s holding it back). Currently (2018) we\u0026rsquo;re processing as many as 20 TV channels in real time using a single computer with a i5 CPU.\nWhat platforms does CCExtractor work on?\nCCExtractor is developed and tested in Windows and Linux. It is also known to compile and run fine in OSX (a build script is included in the source .zip).\nWhere can I download it?\nThe source code is hosted on github. Check out our download page for links to everything. Old versions were hosted on sourceforge. We\u0026rsquo;re keeping those there for statistical purposes. This is the old download page and this is the old project summary page.\nHow I can contact the author?\nThere\u0026rsquo;s no longer one author. Carlos is still the official maintainer but there\u0026rsquo;s a lot of people contributing to the project. Best thing is to check out our support page.\nHow do I use this tool (parameters, etc)?\nRun it without parameters and you will get a help screen. Basically, you just give it the input file name, like this:\nccextractor the.sopranos.ts\nAs for the lack of documentation: There is no lack of documentation! It\u0026rsquo;s just included in the program itself. Just run it without parameters and you will get complete details.\nHow can I contribute to this project?\nThere are several ways:\n- If you are a developer, since the source code is available, you can fix things or add features yourself and submit a patch.\n- If you are an user and find any bug, or have good suggestions, let me know.\n- If you are doing your own recordings and have any particular one that CCExtractor can\u0026rsquo;t process correctly, I\u0026rsquo;d definitely like to take a look at it and try to fix it.\n- If you really hate that there is not a lot of documentation, you can write it yourself. I\u0026rsquo;ll answer any question you might have.\nDoes CCExtractor use code from other projects?\nYes. Lots of code came originally from McPoodle\u0026rsquo;s tools (even though it was ported from Perl to C). We\u0026rsquo;ve also taken code from MythTV (which in turn took some from other places) and FFmpeg. The teletext code is 95% Petr Kutalek\u0026rsquo;s and was integrated with permission.\nA good thing about Open Source is that you don\u0026rsquo;t need to reinvent the wheel unless you want to (or unless you think you can come up with a \u0026lsquo;rounder\u0026rsquo; wheel).\n"});})();